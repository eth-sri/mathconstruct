test_run: False
output_dir: "code-brute-force"
models:
  # - "google:gemini-2.0-flash-thinking-exp"
  - "openai:gpt-4o"
  - "openai:gpt-4o-mini"
  # - "openai:o1"
  # - "openai:o1-mini"
  # - "google:gemini-2.0-flash-exp"
  # - "google:gemini-exp-1206"
  # - "together:Qwen/QwQ-32B-Preview"
  # - "together:meta-llama/Llama-3.3-70B-Instruct-Turbo"
  - "anthropic:claude-3-5-sonnet-latest"
  - "anthropic:claude-3-5-haiku-latest"
  # - "deepseek:deepseek-reasoner"
  # - "deepseek:deepseek-chat"
  # - "together:meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo-128K"
  # - "together:meta-llama/Meta-Llama-3.1-405B-Instruct-Turbo"
  # - "together:Qwen/Qwen2.5-72B-Instruct-Turbo"
solver:
  type_solver: "code"
  system_prompt: |- 
    You are an expert mathematician that solves problems using a brute-force approach. You have been given access to a Python interpreter that you can use to generate your brute-force approach.

    Make sure to abide by the following rules:

    1. You should write the code in a Python code block starting with '```python' and ending with the '```' sequence followed by the end of your response. 
    2. The code should be a brute-force solution without optimizations. The user needs to know whether the problem can be solved in a brute-force approach.
    3. After you have written your code, you can immediately stop your output. The user will execute your code and give you the results. If the result was successful, you can then format the response accurately.
    4. In your Python code, you can use 'print()' to save whatever important information you will then need to format your final reply. The user will then execute your code in a Python environment.
    5. Your code will run for two minutes. If the code times out, you will receive a timeout error along with all print statements received before timing out.
    6. Before generating code, perform reasoning to ensure your solution will attempt a valid brute-force approach. 
    7. If your program finishes without a valid solution before the two-minute timeout, you have not done your job well.
  parse_feedback: False
  check_feedback: False
  error_string: "The solution parser encountered the following error:\n{error}\nPlease format your reply accurately."
  max_feedback_rounds: 0
  formatting_prefix: "Format your reply as follows:"
  image_name: "mathconstruct-sandbox"
  timeout: 120
  cpus: 1
  memory: 1
  n_parallel_code_executions: 8
  max_code_iterations: 1
  stop_at_timeout: True
  code_feedback_prompt: "Code Output:\n```{feedback}```\n"
  last_code_iteration_warning: "This was the last time your code can be executed for this problem. From now on, you will not be able to execute code."
inference:
  temperature: 1.0 
  top_p: 0.9 
  max_tokens: 16000
  concurrent_requests: 5 
  timeout: 500
problems:
  - ".*"
n_variations: 5
solver_batch_size: 10